オブジェクトの使い方
1、生成
オブジェクト名　＝　new クラス名();
Student su1 = new Student(); 
new演算子はメモリ領域を確保

stu1 に入るものは新しいメモリがあるアドレス(参照値)
デフォルト初期値も入る
クラスをもとにオブジェクトを作成することをインスタンス化

オブジェクト名.変数名
オブジェクト名.メソッド名(引数)

実行ファイルをコンパイルしたら設計ファイルも勝手にコンパイルされる



効率よく作成していくためのもの
・オーバーロール
クラス内に同じ名前で引数の方や数が違うメソッドを複数定義すること
class Student {
    void setData(String n) {

    }

    void setData(String n, int e, int m) {

    }
}
setDataは両方とも同じデータをセットしているメソッドであるが、引数が違うだけ
呼び出すときは名前と引数の組み合わせで決めている

Student stu = new Student();
stu.setData("菅原");
stu.setData("菅原", 80, 90);

どんなメリットがある？
作成する側は、名前をいろいろつけなくていい、同じような処理をしているのでわかりやすい
使う側は、同じ名前出だるので使いやすい

オブジェクトの初期化　＝　コンストラクタ(メソッド)
ルール1: 名前がクラスト一緒
ルール2:戻り値を持たない
ルール3: new クラス名(コンストラクタへの引数)
初期化していない場合はデフォルトコンストラクタが生成される
Student() {}

staticについて
インスタンスの個数を知る方法は？
インスタンス内の変数ではできない
全インスタンスが共通して利用できる変数があればインクリメントできる
JSでいうところのグローバル変数のことをstaticで


カプセル化
アクセス修飾子でクラス・メンバ変数・メソッドの公開範囲を指定できる
・public      => クラス　パッケージ　サブクラス　その他
・protected   => クラス　パッケージ　サブクラス
・なし        => クラス　パッケージ
・private     => クラス
JSでいうところのimport,exportみたいな感じ、
修正範囲が特定しやすい、代入前処理
メンバ変数にはprivateで他で使用できないようにして、メソッドなど他で使えるようにする者にはどの範囲使用できるか

サンプルプログラム